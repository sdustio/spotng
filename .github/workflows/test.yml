name: test

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - master

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cpp-linter/cpp-linter-action@v1
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file
          tidy-checks: bugprone-*,performance-*,readability-*,portability-*,modernize-*,clang-analyzer-*,cppcoreguidelines-*
          ignore: test|third_party

      - name: Fail fast?!
        if: steps.linter.outputs.checks-failed > 0
        run: |
          echo "Some files failed the linting checks!"
  test:
    name: test-${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE: Debug
      CMAKE_BUILD: ${{github.workspace}}/build
      CACHE_DIR: ${{github.workspace}}/.cache
      CCACHE_BASEDIR: ${{github.workspace}}
      CCACHE_DIR: ${{github.workspace}}/.cache/ccache
      CCACHE_COMPRESS: "true"
      CCACHE_COMPRESSLEVEL: "6"
      CCACHE_MAXSIZE: 600M
      VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/.cache/vcpkg

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: ./.github/actions/ccache
      name: install ccache

    - name: prepare cache dir
      run: |
        mkdir -p ${{env.CCACHE_DIR}}
        mkdir -p ${{env.VCPKG_DEFAULT_BINARY_CACHE}}

    - uses: actions/cache@v3
      id: cache-cmake
      with:
        path: ${{env.CACHE_DIR}}
        key: ${{ runner.os }}-testbuild-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-testbuild-

    - name: Configure CMake (non-Windows)
      if: runner.os != 'Windows'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -DSDENGINE_BUILD_TESTS:BOOL=TRUE -B ${{env.CMAKE_BUILD}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          "-DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: |
        cmake -DSDENGINE_BUILD_TESTS:BOOL=TRUE -B ${{env.CMAKE_BUILD}} `
          -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache `
          "-DCMAKE_TOOLCHAIN_FILE=$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{env.CMAKE_BUILD}} --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{env.CMAKE_BUILD}}
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Test Memory Check
      if: runner.os == 'Linux'
      working-directory: ${{env.CMAKE_BUILD}}
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        sudo apt install -y valgrind
        ctest -C ${{env.BUILD_TYPE}} -T memcheck
